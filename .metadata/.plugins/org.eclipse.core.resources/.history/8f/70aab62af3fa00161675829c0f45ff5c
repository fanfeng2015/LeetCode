package ransomNote;

import java.util.HashMap;
import java.util.Map;

// LeetCode #383

// Given an arbitrary ransom note string and another string containing letters 
// from all the magazines, write a function that will return true if the ransom note 
// can be constructed from the magazines; otherwise, it will return false.

// Each letter in the magazine string can only be used once in your ransom note.

// You may assume that both strings contain only lower-case letters.

public class RansomNote {

	public boolean canConstruct(String ransomNote, String magazine) {
		Map<Character, Integer> map = new HashMap<>();
		int i = 0, j = 0;
		while (i < ransomNote.length() || j < magazine.length()) {
			if (i < ransomNote.length()) {
				Integer count = map.get(ransomNote.charAt(i));
				count = count == null ? -1 : count - 1;
				map.put(ransomNote.charAt(i), count);
				i++;
			}
			if (j < magazine.length()) {
				Integer count = map.get(magazine.charAt(j));
				count = count == null ? 1 : count + 1;
				map.put(magazine.charAt(j), count);
				j++;
			}
		}
		for (Map.Entry<Character, Integer> entry : map.entrySet()) {
			if (entry.getValue() < 0) {
				return false;
			}
		}
		return true;
	}
	
	// Time complexity is O(m + n).
	// Space complexity is O(1), assuming strings only contain lower-case letters.

}

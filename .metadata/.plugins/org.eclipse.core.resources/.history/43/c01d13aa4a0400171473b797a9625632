package countOfSmallerNumbersAfterSelf;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

// LeetCode #315
// LaiCode CountArray

// You are given an integer array nums and you have to return a new counts array. 
// The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

public class CountOfSmallerNumbersAfterSelf {

	static class Node {
		int index, val, count = 0;

		Node(int index, int val) {
			this.index = index;
			this.val = val;
		}

		Node(int index, int val, int count) {
			this.index = index;
			this.val = val;
			this.count = count;
		}
	}

	public List<Integer> countSmaller(int[] nums) {
		Node[] nodes = construct(nums);
		Node[] helper = new Node[nums.length];
		mergeSort(nodes, helper, 0, nums.length - 1);
		int[] array = new int[nums.length];
		for (int i = 0; i < nodes.length; i++) {
			Node node = nodes[i];
			array[node.index] = node.count;
		}
		List<Integer> result = new ArrayList<>();
		for (int i : array) {
			result.add(i);
		}
		return result;
	}

	private Node[] construct(int[] nums) {
		Node[] result = new Node[nums.length];
		for (int i = 0; i < nums.length; i++) {
			result[i] = new Node(i, nums[i]);
		}
		return result;
	}

	private void mergeSort(Node[] nodes, Node[] helper, int left, int right) {
		if (left >= right) {
			return;
		}
		int mid = left + (right - left) / 2;
		mergeSort(nodes, helper, left, mid);
		mergeSort(nodes, helper, mid + 1, right);
		merge(nodes, helper, left, mid, right);
	}

	private void merge(Node[] nodes, Node[] helper, int left, int mid, int right) {
		for (int i = left; i <= right; i++) {
			helper[i] = new Node(nodes[i].index, nodes[i].val);
		}
		int leftIndex = left, rightIndex = mid + 1;
		while (leftIndex <= mid && rightIndex <= right) {
			if (helper[leftIndex].val <= helper[rightIndex].val) {
				nodes[left++] = new Node(helper[leftIndex].index, helper[leftIndex].val, helper[leftIndex].count);
				leftIndex++;
			} else {
				nodes[left] = new Node(helper[rightIndex].index, helper[rightIndex].val);
				rightIndex++;
				helper[leftIndex].count++;
				left++;
			}
		}
		while (leftIndex <= mid) {
			nodes[left++] = helper[leftIndex++];
			// nodes[left].count += mid - leftIndex + 1;
			// left++;
		}
	}

	public static void main(String[] args) {
		CountOfSmallerNumbersAfterSelf countOfSmallerNumbersAfterSelf = new CountOfSmallerNumbersAfterSelf();
		int[] nums = new int[] { 5, 2, 6, 1 };
		System.out.println(Arrays.toString(countOfSmallerNumbersAfterSelf.countSmaller(nums).toArray()));
	}
}

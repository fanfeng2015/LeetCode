package sudokuSolver;

// LeetCode #37

public class SudokuSolver {

	public void solveSudoku(char[][] board) {
		DFS(board);
	}

	private boolean DFS(char[][] board) {
		int n = board.length;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; i++) {
				if (board[i][j] == '.') {
					for (char ch = '1'; ch <= '9'; ch++) {
						if (valid(board, i, j, ch)) {
							board[i][j] = ch;
							if (DFS(board)) {
								return true;
							}
							board[i][j] = '.';
						}
					}
					return false;
				}
			}
		}
		return true;
	}

	private valid(char[][] board, int i, int j, char ch) {
		// need to check row i, col j, and square []
		for (i = 0; i < board.length; i++) {
			
		}
	}

}

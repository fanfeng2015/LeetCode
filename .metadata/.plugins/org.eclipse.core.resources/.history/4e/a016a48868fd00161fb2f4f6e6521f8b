package minimumDepthOfBinaryTree;

import java.util.LinkedList;

// LeetCode #111

// Given a binary tree, find its minimum depth.
// The minimum depth is the number of nodes along the shortest path 
// from the root node down to the nearest leaf node.

public class MinimumDepthOfBinaryTree {

	// Solution 1: DFS (recursion)
	public int minDepth(TreeNode root) {
		// base case
		if (root == null) {
			return 0;
		}
		int left = minDepth(root.left);
		int right = minDepth(root.right);
		return (left == 0 || right == 0) ? left + right + 1 : Math.min(left, right) + 1;
	}
	
	// Solution 2: BFS (queue)
	public int minDepth(TreeNode root) {
		LinkedList<TreeNode> queue = new LinkedList<>();
		queue.offerFirst(root);
	}

}

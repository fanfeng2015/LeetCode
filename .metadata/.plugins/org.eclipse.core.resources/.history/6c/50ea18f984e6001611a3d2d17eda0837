package lfuCache;

import java.util.HashMap;
import java.util.LinkedHashSet;

public class LFUCache {

	static class Node {
		int count = 0;
		LinkedHashSet<Integer> keys = null;
		Node prev = null, next = null;

		public Node(int count) {
			this.count = count;
			keys = new LinkedHashSet<>();
			prev = next = null;
		}
	}

	private Node head;
	private int capacity;
	private HashMap<Integer, Integer> valueMap;
	private HashMap<Integer, Node> nodeMap;

	public LFUCache(int capacity) {
		this.capacity = capacity;
		valueMap = new HashMap<>();
		nodeMap = new HashMap<>();
	}

	public int get(int key) {
		Integer value = valueMap.get(key);
		if (value != null) {
			increaseCount(key);
			return value;
		}
		return -1;
	}

	private void increaseCount(int key) {
		Node node = nodeMap.get(key);
		node.keys.remove(key);
		if (node.next == null) {
			node.next = new Node(node.count + 1);
			node.next.prev = node;
			node.next.keys.add(key);
		} else if (node.next.count == node.count + 1) {
			node.next.keys.add(key);
		} else {
			Node newNode = new Node(node.count + 1);
			newNode.keys.add(key);
			newNode.next = node.next;
			node.next.prev = newNode;
			node.next = newNode;
			newNode.prev = node;
		}
		nodeMap.put(key, node.next);
		if (node.keys.size() == 0) {
			remove(node);
		}
	}

	private void remove(Node node) {
		if (node.prev == null) {
			head = node.next;
		} else {
			node.prev.next = node.next;
		}
		if (node.next != null) {
			node.next.prev = node.prev;
		}
	}

}

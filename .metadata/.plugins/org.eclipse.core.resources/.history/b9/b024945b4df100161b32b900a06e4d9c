package palindromePartitioning;

import java.util.List;

// LeetCode #131

// Given a string s, partition s such that every substring of the partition is a palindrome.
// Return all possible palindrome partitioning of s.

// For example, given s = "aab", return [ ["aa", "b"], ["a", "a", "b"] ]

public class PalindromePartitioning {

	public List<List<String>> partition(String s) {
		// first, build table M
		boolean[][] M = isPalindrome(String s);
	}

	private boolean[][] isPalindrome(String s) {
		int n = s.length();
		boolean[][] M = new boolean[n][n];
		for (int i = n - 1; i >= 0; i--) {
			for (int j = i; j <= n - 1; j++) {
				if (i == j || (i == j - 1 && s.charAt(i) == s.charAt(j))
						|| (i < j - 1 && s.charAt(i) == s.charAt(j) && M[i + 1][j - 1])) {
					M[i][j] = true;
				}
			}
		}
		return M;
	}

}

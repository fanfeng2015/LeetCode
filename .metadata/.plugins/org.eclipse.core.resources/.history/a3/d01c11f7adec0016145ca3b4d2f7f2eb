package isomorphicStrings;

import java.util.HashMap;
import java.util.Map;

public class IsomorphicStrings {

	// Solution 1: use 2 hash maps, one maps s to t, the other maps t to s
	public boolean isIsomorphic(String s, String t) {
		if (s == null || t == null || s.length() != t.length()) {
			return false;
		}
		Map<Character, Character> st = new HashMap<>();
		Map<Character, Character> ts = new HashMap<>();
		for (int i = 0; i < s.length(); i++) {
			Character charT = st.get(s.charAt(i));
			Character charS = ts.get(t.charAt(i));
			if (charT == null && charS == null) {
				st.put(s.charAt(i), t.charAt(i));
				ts.put(t.charAt(i), s.charAt(i));
			} else if (charT != null && charS != null && charT == t.charAt(i) && charS == s.charAt(i)) {
				continue;
			} else {
				return false;
			}
		}
		return true;
	}

	// Solution 2: use 1 hash map
	public boolean isIsomorphic2(String s, String t) {
		if (s == null || t == null || s.length() != t.length()) {
			return false;
		}
		Map<Character, Character> map = new HashMap<>();
		for (int i = 0; i < s.length(); i++) {
			char a = s.charAt(i);
			char b = t.charAt(i);
			if (map.containsKey(a)) {
				if (map.get(a) != b)) {
					return false;
				}
			} else {
				if (!map.containsValue(b))
					map.put(a, b);
				else
					return false;

			}
		}
		return true;

	}

}

package repeatedSubstringPattern;

// LeetCode #459
// Given a non-empty string check if it can be constructed by taking a substring of it 
// and appending multiple copies of the substring together. 
// You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.

public class RepeatedSubstringPattern {

	public boolean repeatedSubstringPattern(String str) {
		int n = str.length();
		for (int i = n / 2; i >= 1; i--) {
			// i represents length of the substring
			if (n % i == 0) {
				int times = n / i;
				String subString = str.substring(0, i);
				for (int j = 1; j < times; j++) {
					if (!subString.equals(str.substring(i * j, i * (j + 1)))) {
						break;
					}
					if (j == times - 1) {
						return true;
					}
				}
			}
		}
		return false;
	}
}

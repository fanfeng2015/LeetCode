package longestSubstringWithAtLeastKRepeatingCharacters;

// LeetCode #395

// Find the length of the longest substring T of a given string (consists of lower-case letters only) 
// such that every character in T appears no less than k times.

public class LongestSubstringWithAtLeastKRepeatingCharacters {

	public int longestSubstring(String s, int k) {
		return longestSubstring(s, k, 0, s.length() - 1);
	}

	private int longestSubstring(String s, int k, int left, int right) {
		// base case
		if (right - left + 1 < k) {
			return 0;
		}
		int[] count = new int[26];
		for (int i = left; i <= right; i++) {
			count[s.charAt(i) - 'a']++;
		}
		for (int i = 0; i < 26; i++) {
			// if a character exists in this substring from left to right
		}
	}

}

package gasStation;

// LeetCode #134

// There are N gas stations along a circular route, where the amount of gas at station i is gas[i].
// You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). 
// You begin the journey with an empty tank at one of the gas stations.
// Return the starting gas station's index if you can travel around the circuit once, otherwise return -1.

// The solution is guaranteed to be unique.

public class GasStation {

	public int canCompleteCircuit(int[] gas, int[] cost) {
		int n = gas.length;
		int[] M = new int[n];
		for (int i = 0; i < n; i++) {
			M[i] = gas[i] - cost[i];
		}
		for (int i = 0; i < n; i++) {
			if (M[i] >= 0) {
				int sum = 0;
				for (int j = 0; j < n; j++) {
					sum += M[(i + j) % n];
					if (sum < 0) {
						break;
					}
					if (j == n - 1) {
						return i;
					}
				}
			}
		}
		return -1;
	}

}

package combinationSum;

import java.util.ArrayList;
import java.util.List;

// LeetCode #39

// Given a set of candidate numbers (C) (without duplicates) and a target number (T), 
// find all unique combinations in C where the candidate numbers sums to T.
//The same repeated number may be chosen from C unlimited number of times.

public class CombinationSum {

	public List<List<Integer>> combinationSum(int[] candidates, int target) {
		List<List<Integer>> result = new ArrayList<List<Integer>>();
		List<Integer> cur = new ArrayList<>();
		DFS(result, cur, candidates, target, 0);
		return result;
	}

	private void DFS(List<List<Integer>> result, List<Integer> cur, int[] candidates, int target, int level) {
		if (level == candidates.length) {
			if (target == 0) {
				add(result, cur);
			}
			return;
		}
		for (int i = 0; i <= target / candidates[level]; i++) {
			cur.add(i);
			DFS(result, cur, candidates, target - i * candidates[i], level + 1);
			cur.remove(cur.size() - 1);
		}
	}

	private void add(List<List<Integer>> result, List<Integer> cur) {
		List<Integer> r = new ArrayList<>();
		for (int i = 0; i < cur.size(); i++) {
			for (int j = 0; j < cur.get(i); j++) {
				r.add(cur.get(i));
			}
		}
		result.add(r);
	}

}

package wordLadder;

import java.util.HashMap;
import java.util.Map;

// LeetCode #290

// Given a pattern and a string str, find if str follows the same pattern.
// Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

public class WordPattern {

	public boolean wordPattern(String pattern, String str) {
		String[] words = str.split(" ");
		System.out.println(Arrays.toString(words));
		if (pattern.length() != words.length) {
			return false;
		}
		Map<Character, String> patternToStr = new HashMap<>();
		Map<String, Character> strToPattern = new HashMap<>();
		for (int i = 0; i < pattern.length(); i++) {
			if (!patternToStr.containsKey(pattern.charAt(i)) && !strToPattern.containsKey(words[i])) {
				// System.out.println("pattern: " + pattern.charAt(i) + ", str: " + words[i]);
				patternToStr.put(pattern.charAt(i), words[i]);
				strToPattern.put(words[i], pattern.charAt(i));
			} else if (patternToStr.containsKey(pattern.charAt(i)) && strToPattern.containsKey(words[i]) && !patternToStr.get(pattern.charAt(i)).equals(words[i])
					|| !strToPattern.get(words[i]).equals(pattern.charAt(i))) {
			    return false;
			} else if ((patternToStr.containsKey(pattern.charAt(i)) && !strToPattern.containsKey(words[i])) || (!patternToStr.containsKey(pattern.charAt(i)) && strToPattern.containsKey(words[i]))) {
				// System.out.println(patternToStr.get(pattern.charAt(i)) + ", " + strToPattern.get(words[i]));
				return false;
			}
		}
		return true;
	}

}

package theSkylineProblem;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;

// LeetCode #218

// https://leetcode.com/problems/the-skyline-problem/?tab=Description

public class TheSkylineProblem {

	public List<int[]> getSkyline(int[][] buildings) {
		List<int[]> result = new ArrayList<>();
		List<int[]> height = new ArrayList<>();
		for (int[] building : buildings) {
			height.add(new int[] { building[0], -building[2] });
			height.add(new int[] { building[1], building[2] });
		}
		Collections.sort(height, new Comparator<int[]>() {
			@Override
			public int compare(int[] one, int[] two) {
				if (one[0] != two[0]) {
					return one[0] < two[0] ? -1 : 1;
				} else if (one[1] != two[1]) {
					return one[1] < two[1] ? -1 : 1;
				}
				return 0;
			}
		});
		PriorityQueue<Integer> maxHeap = new PriorityQueue<>(height.size(), new Comparator<Integer>() {
			@Override
			public int compare(Integer x, Integer y) {
				if (x == y) {
					return 0;
				}
				return x > y ? -1 : 1;
			}
		});

	}

}

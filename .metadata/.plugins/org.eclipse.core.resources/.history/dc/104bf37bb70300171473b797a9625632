package combinationSum2;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

// LeetCode #40

// Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.
// Each number in C may only be used once in the combination.

public class CombinationSum2 {

	public List<List<Integer>> combinationSum2(int[] candidates, int target) {
		List<List<Integer>> result = new ArrayList<List<Integer>>();
		List<Integer> cur = new ArrayList<>();
		Arrays.sort(candidates);
		DFS(result, cur, candidates, target, 0);
		return result;
	}

	private void DFS(List<List<Integer>> result, List<Integer> cur, int[] candidates, int target, int level) {
		if (target < 0) {
			return;
		} else if (target == 0) {
			result.add(new ArrayList<Integer>(cur));
			return;
		}
		for (int i = level; i < candidates.length; i++) {
			if (i > level && candidates[i] == candidates[i - 1]) {
				continue;
			}
			cur.add(candidates[i]);
			DFS(result, cur, candidates, target - candidates[i], i + 1);
			cur.remove(cur.size() - 1);
		}
	}

}

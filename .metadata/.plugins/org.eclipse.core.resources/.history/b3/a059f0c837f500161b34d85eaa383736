package validSudoku;

import java.util.HashSet;
import java.util.Set;

// LeetCode #36

// Determine if a Sudoku is valid.
// The Sudoku board could be partially filled, where empty cells are filled with the character '.'.

public class ValidSudoku {

	public boolean isValidSudoku(char[][] board) {
		int m = board.length, n = board[0].length;
		Set<Character> set = new HashSet<>();
		for (int i = 0; i < m; i++) {
			set.clear();
			for (int j = 0; j < n; j++) {
				if (Character.isDigit(board[i][j]) && !set.add(board[i][j])) {
					return false;
				}
			}
		}
		for (int j = 0; j < n; j++) {
			set.clear();
			for (int i = 0; i < m; i++) {
				if (Character.isDigit(board[i][j]) && !set.add(board[i][j])) {
					return false;
				}
			}
		}
		for (int i = 0; i < m / 3; i++) {
			for (int j = 0; j < n / 3; j++) {
				set.clear();
				for (int row = 3 * i; row < 3 * i + 3; row++) {
					for (int col = 3 * j; col < 3 * j + 3; col++) {
						if (Character.isDigit(board[i][j]) && !set.add(board[i][j])) {
							return false;
						}
					}
				}
			}
		}
		return true;
	}
	
	
	public boolean isValidSudoku2(char[][] board) {
		int m = board.length, n = board[0].length;
		int[][] rows = new int[9][9], cols = new int[9][9], blocks = new int[9][9];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				int k = (i / 3) * 3 + j / 3;
				if (board[i][j] != '.') {
					int num = Character.getNumericValue(board[i][j]) - 1;
					if (rows[i][num] == num || cols[j][num] == num || blocks[k][num] == num) {
						return false;
					}
					rows[i][num] = cols[j][num] = blocks[k][num] = num;
				}
			}
		}
	}

}

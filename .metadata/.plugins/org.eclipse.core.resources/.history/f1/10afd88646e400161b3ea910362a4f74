package insertDeleteGetRandomO1;

// LeetCode 380
// Design a data structure that supports all following operations in average O(1) time:
// insert(val): Inserts an item val to the set if not already present.
// remove(val): Removes an item val from the set if present.
// getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InsertDeleteGetRandomO1 {

	/** Initialize your data structure here. */
	List<Integer> list;
	Map<Integer, Integer> map;

	public InsertDeleteGetRandomO1() {
		this.list = new ArrayList<>();
		this.map = new HashMap<>();
	}

	/**
	 * Inserts a value to the set. Returns true if the set did not already
	 * contain the specified element.
	 */
	public boolean insert(int val) {
		if (map.containsKey(val)) {
			return false;
		}
		list.add(val);
		map.put(val, list.size() - 1);
		return true;
	}

	/**
	 * Removes a value from the set. Returns true if the set contained the
	 * specified element.
	 */
	public boolean remove(int val) {
		if (!map.containsKey(val)) {
			return false;
		}
		int index = map.get(val);
		if (index != list.size() - 1) {
			map.put(list.get(list.size() - 1), index);
			int temp = list.get(index);
			list.set(index, list.get(list.size() - 1));
			list.set(list.size() - 1, temp);
		}
		list.remove(list.size() - 1);
		map.remove(val);
		return true;
	}

	/** Get a random element from the set. */
	public int getRandom() {
		Random rand = new Random();
		return list.get(rand.nextInt(list.size()));
	}

}

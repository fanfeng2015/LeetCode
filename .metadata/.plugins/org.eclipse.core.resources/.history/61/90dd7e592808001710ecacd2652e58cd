package removeInvalidParentheses;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

// LeetCode #301

// Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.
// Note: The input string may contain letters other than the parentheses ( and ).

public class RemoveInvalidParentheses {

	public List<String> removeInvalidParentheses(String s) {
		List<String> result = new ArrayList<>();
		if (s == null) {
			return result;
		}
		Set<String> visited = new HashSet<>();
		LinkedList<String> queue = new LinkedList<>();
		visited.add(s);
		queue.offerFirst(s);
		while (!queue.isEmpty()) {
			String cur = queue.pollLast();
			if (isValid(cur)) {
				result.add(cur);
				//
			}
			for (int i = 0; i < cur.length(); i++) {
				if (cur.charAt(i) == '(' || cur.charAt(i) == ')') {
					String next = cur.substring(0, i) + s.substring(i + 1);
					if (!visited.contains(next)) {
						queue.offerFirst(next);
						visited.add(next);
					}
				}
			}
		}
	}

	private boolean isValid(String s) {
		int count = 0;
		for (int i = 0; i < s.length(); i++) {
			if (s.charAt(i) == '(') {
				count++;
			} else if (s.charAt(i) == ')') {
				count--;
			}
			if (count < 0) {
				return false;
			}
		}
		return count == 0;
	}

}

package wiggleSort2;

// LeetCode #324

// Given an unsorted array nums, reorder it such that 
// nums[0] < nums[1] > nums[2] < nums[3]....

public class WiggleSort2 {

	public void wiggleSort(int[] nums) {
		int median = findKthLargest(nums, (nums.length + 1) / 2);
		int n = nums.length;

		int left = 0, i = 0, right = n - 1;

		while (i <= right) {

			if (nums[newIndex(i, n)] > median) {
				swap(nums, newIndex(left++, n), newIndex(i++, n));
			} else if (nums[newIndex(i, n)] < median) {
				swap(nums, newIndex(right--, n), newIndex(i, n));
			} else {
				i++;
			}
		}

	}

	private int newIndex(int index, int n) {
		return (1 + 2 * index) % (n | 1);
	}
	
	// k-th smallest element in array
	public int select(int[] array, int k) {
		int low = 0, high = array.length - 1;
		while (low < high) {
			int j = partition(array, low, high);
			if (j < k) {
				low = j + 1;
			} else if (j > k) {
				high = j - 1;
			} else {
				return array[k];
			}
		}
		return array[k];
	}

	private int partition(int[] array, int left, int right) {
		// randomly select a pivot position
		int pivotIndex = left + (int) (Math.random() * (right - left + 1));
		int pivot = array[pivotIndex];
		// swap the pivot element to the rightmost position
		swap(array, pivotIndex, right);
		int leftBound = left;
		int rightBound = right - 1;
		while (leftBound <= rightBound) {
			if (array[leftBound] < pivot) {
				leftBound++;
			} else if (array[rightBound] >= pivot) {
				rightBound--;
			} else {
				swap(array, leftBound++, rightBound--);
			}
		}
		swap(array, leftBound, right);
		return leftBound;
	}

	private void swap(int[] array, int left, int right) {
		int temp = array[left];
		array[left] = array[right];
		array[right] = temp;
	}
	

}

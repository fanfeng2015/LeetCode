package mostFrequentSubtreeSum;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MostFrequentSubtreeSum {

	public int[] findFrequentTreeSum(TreeNode root) {
		Map<Integer, Integer> map = new HashMap<>(); // frequency map
		Integer[] max = new Integer[] { 0 }; // global max frequency
		helper(root, map, max);
		List<Integer> result = new ArrayList<>();
		for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
			if (entry.getValue() == max[0]) {
				result.add(entry.getKey());
			}
		}
		return result.stream().mapToInt(i -> i).toArray();
	}

	private int helper(TreeNode root, Map<Integer, Integer> map, Integer[] max) {
		// base case
		if (root == null) {
			return 0;
		}
		// recursive rule
		int left = helper(root.left, map, max);
		int right = helper(root.right, map, max);
		add(left + right + root.val, map, max);
		return left + right + root.val;
	}

	private void add(int val, Map<Integer, Integer> map, Integer[] max) {
        Integer frequency = map.get(val);
        frequency = frequency == null ? 1 : frequency + 1
            map.put(val, frequency + 1);
        max[0] = Math.max(max[0], map.get(val)); // might need to update max frequency
    }

}

package substringWithConcatenationOfAllWords;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// LeetCode #30

// You are given a string, s, and a list of words, words, 
// that are all of the same length. 
// Find all starting indices of substring(s) in s that is a 
// concatenation of each word in words exactly once and without
// any intervening characters.

public class SubstringWithConcatenationOfAllWords {

	public List<Integer> findSubstring(String s, String[] words) {
		List<Integer> result = new ArrayList<>();
		int m = s.length(), n = words.length, k = words[0].length();
		if (m < n * k) {
			return result;
		}
		// words could possibly contain duplicate words
		Map<String, Integer> map = new HashMap<>();
		for (String word : words) {
			Integer count = map.get(word);
			count = count == null ? 1 : count + 1;
			map.put(word, count);
		}
		for (int i = 0; i <= m - n * k; i++) {
			Map<String, Integer> copy = new HashMap<>(map);
			if (isConcatenationOfAllWords(copy, s.substring(i, i + n * k)), words) {
				result.add(i);
			}
		}
		return result;
	}
	
	private boolean isConcatenationOfAllWords(HashMap<String, Integer> map, String substring, String[] words) {
		for (int i = )
	}

	public static void main(String[] args) {
		SubstringWithConcatenationOfAllWords substringWithConcatenationOfAllWords = new SubstringWithConcatenationOfAllWords();
		String s = "lingmindraboofooowingdingbarrwingmonkeypoundcake";
		String[] words = new String[] { "fooo", "barr", "wing", "ding", "wing" };
		substringWithConcatenationOfAllWords.findSubstring(s, words);
	}

}

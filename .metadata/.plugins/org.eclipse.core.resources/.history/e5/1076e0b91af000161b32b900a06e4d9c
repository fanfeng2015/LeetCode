package mergeSortedArray;

// LeetCode #88

// Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.
// You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold 
// additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n
// respectively.

public class MergeSortedArray {

	public void merge(int[] nums1, int m, int[] nums2, int n) {
		for (int i = m - 1; i >= 0; i--) {
			nums1[n + i] = nums1[i];
		}
		int index = 0;
		int one = n, two = 0;
		while (one < m + n && two < n) {
			if (nums1[one] < nums2[two]) {
				nums1[index++] = nums1[one++];
			} else {
				nums1[index++] = nums2[two++];
			}
		}
		// one == m + n || two == n
		while (two < n) {
			nums1[index++] = nums2[two++];
		}
	}

	// Time complexity is O(m + n).
	// Space complexity is O(1).
}

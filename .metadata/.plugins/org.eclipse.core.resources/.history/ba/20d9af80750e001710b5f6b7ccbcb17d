package twoSum;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

// LeetCode #1

// Given an array of integers, return indices of the two numbers such that they add up to a specific target.
// You may assume that each input would have exactly one solution, and you may not use the same element twice.

public class TwoSum {

	public int[] twoSum(int[] nums, int target) {
		Arrays.sort(nums);
		int left = 0, right = nums.length - 1;
		while (left < right) {
			if (nums[left] + nums[right] == target) {
				return new int[] { left, right };
			} else if (nums[left] + nums[right] < target) {
				left++;
			} else {
				right--;
			}
		}
		return new int[] { -1, -1 };
	}

	public int[] twoSum2(int[] nums, int target) {
		Map<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < nums.length; i++) {
			map.put(nums[i], i);
		}
		for (int i = 0; i < nums.length; i++) {
			if (map.containsKey(target - nums[i])) {
				return new int[] { i, map.get(target - nums[i]) };
			}
		}
		return new int[] { -1, -1 };
	}
}

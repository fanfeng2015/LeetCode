package removeInvalidParentheses;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

// LeetCode #301

// Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.
// Note: The input string may contain letters other than the parentheses ( and ).

public class RemoveInvalidParentheses {

	public List<String> removeInvalidParentheses(String s) {
		List<String> ans = new ArrayList<>();
		remove(s, ans, 0, 0, new char[] { '(', ')' });
		return ans;
	}

	public void remove(String s, List<String> ans, int previ, int prevj, char[] parentheses) {
		int count = 0;
		for (int i = previ; i < s.length(); i++) {
			if (s.charAt(i) == parentheses[0]) {
				count++;
			} else if (s.charAt(i) == parentheses[1]) {
				count--;
			}
			if (count >= 0) {
				continue;
			}
			for (int j = prevj; j <= i; j++) {
				if (s.charAt(j) == parentheses[1] && (j == prevj || s.charAt(j - 1) != parentheses[1])) {
					// ()()), can remove the first or the second ), but removing
					// the second and removing the third are the same
					remove(s.substring(0, j) + s.substring(j + 1, s.length()), ans, i, j, parentheses);
				}
			}
			return;
		}
		String reversed = new StringBuilder(s).reverse().toString();
		if (parentheses[0] == '(') {
			remove(reversed, ans, 0, 0, new char[] { ')', '(' });
		}
		else // finished right to left
			ans.add(reversed);
	}

	// Solution 1: BFS (strings on level i have i deleted parentheses)
	public List<String> removeInvalidParentheses2(String s) {
		List<String> result = new ArrayList<>();
		if (s == null) {
			return result;
		}
		Set<String> visited = new HashSet<>();
		LinkedList<String> queue = new LinkedList<>();
		visited.add(s);
		queue.offerFirst(s);
		while (!queue.isEmpty()) {
			int size = queue.size();
			boolean found = false;
			for (int i = 0; i < size; i++) {
				String cur = queue.pollLast();
				if (isValid(cur)) {
					result.add(cur);
					found = true;
				}
				for (int j = 0; j < cur.length(); j++) {
					if (cur.charAt(j) == '(' || cur.charAt(j) == ')') {
						String next = cur.substring(0, j) + cur.substring(j + 1);
						if (!visited.contains(next)) {
							queue.offerFirst(next);
							visited.add(next);
						}
					}
				}
			}
			if (found) {
				return result;
			}
		}
		if (result.size() == 0) {
			result.add("");
		}
		return result;
	}

	private boolean isValid(String s) {
		int count = 0;
		for (int i = 0; i < s.length(); i++) {
			if (s.charAt(i) == '(') {
				count++;
			} else if (s.charAt(i) == ')') {
				count--;
			}
			if (count < 0) {
				return false;
			}
		}
		return count == 0;
	}

	// Time complexity is O()
}

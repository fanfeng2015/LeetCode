package longestValidParentheses;

import java.util.LinkedList;

// LeetCode #32

// Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.
// For "(()", the longest valid parentheses substring is "()", which has length = 2.
// Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.

public class LongestValidParentheses {

	public int longestValidParentheses(String s) {
		LinkedList<Integer> stack = new LinkedList<>();
		for (int i = 0; i < s.length(); i++) {
			if (s.charAt(i) == '(') {
				stack.offerLast(i);
			} else {
				// s.charAt(i) == '('
				if (stack.size() > 0 && stack.peekLast() == '(') {
					stack.pollLast();
				} else {
					stack.offerLast(i);
				}
			}
		}
		int max = s.length();
		while (stack.size() > 1) {
			max = Math.max(max, stack.pollLast() - stack.peekLast() - 1);
		}
		return max;
	}
	
	// Time complexity is O(n).
	// Space 

}

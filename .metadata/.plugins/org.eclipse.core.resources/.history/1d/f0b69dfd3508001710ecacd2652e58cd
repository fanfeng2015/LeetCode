package removeInvalidParentheses;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

// LeetCode #301

// Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.
// Note: The input string may contain letters other than the parentheses ( and ).

public class RemoveInvalidParentheses {

	// Solution 1: BFS (strings on level i have i deleted parentheses)
	public List<String> removeInvalidParentheses(String s) {
		List<String> result = new ArrayList<>();
		if (s == null) {
			return result;
		}
		Set<String> visited = new HashSet<>();
		LinkedList<String> queue = new LinkedList<>();
		visited.add(s);
		queue.offerFirst(s);
		while (!queue.isEmpty()) {
			int size = queue.size();
			boolean found = false;
			for (int i = 0; i < size; i++) {
				String cur = queue.pollLast();
				if (isValid(cur)) {
					result.add(cur);
					found = true;
				}
				for (int j = 0; j < cur.length(); j++) {
					if (cur.charAt(j) == '(' || cur.charAt(j) == ')') {
						String next = cur.substring(0, j) + cur.substring(j + 1);
						if (!visited.contains(next)) {
							queue.offerFirst(next);
							visited.add(next);
						}
					}
				}
			}
			if (found) {
				return result;
			}
		}
		if (result.size() == 0) {
			result.add("");
		}
		return result;
	}

	private boolean isValid(String s) {
		int count = 0;
		for (int i = 0; i < s.length(); i++) {
			if (s.charAt(i) == '(') {
				count++;
			} else if (s.charAt(i) == ')') {
				count--;
			}
			if (count < 0) {
				return false;
			}
		}
		return count == 0;
	}
	
	// Time complexity is O(n + )
	
	public List<String> removeInvalidParentheses2(String s) {
	    List<String> ans = new ArrayList<>();
	    remove(s, ans, 0, 0, new char[]{'(', ')'});
	    return ans;
	}

	public void remove(String s, List<String> ans, int last_i, int last_j,  char[] par) {
	    for (int stack = 0, i = last_i; i < s.length(); ++i) {
	        if (s.charAt(i) == par[0]) stack++;
	        if (s.charAt(i) == par[1]) stack--;
	        if (stack >= 0) continue;
	        for (int j = last_j; j <= i; ++j)
	            if (s.charAt(j) == par[1] && (j == last_j || s.charAt(j - 1) != par[1]))
	                remove(s.substring(0, j) + s.substring(j + 1, s.length()), ans, i, j, par);
	        return;
	    }
	    String reversed = new StringBuilder(s).reverse().toString();
	    if (par[0] == '(') // finished left to right
	        remove(reversed, ans, 0, 0, new char[]{')', '('});
	    else // finished right to left
	        ans.add(reversed);
	}

}

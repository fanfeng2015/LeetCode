package combinationSum;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// LeetCode #39

// Given a set of candidate numbers (C) (without duplicates) and a target number (T), 
// find all unique combinations in C where the candidate numbers sums to T.
//The same repeated number may be chosen from C unlimited number of times.

public class CombinationSum {

	// M[i][j]: whether candidates from 0, ..., i, inclusive, can sum up to j
	public List<List<Integer>> combinationSum(int[] candidates, int target) {
		Map<Integer, ArrayList<Integer>> map = new HashMap<>();
		map.put(0, new ArrayList<Integer>());
		for (int i = 0; i < candidates.length; i++) {
			for (int j = 1; j <= target / candidates[i]; j++) {
				
			}
		}
	}

}

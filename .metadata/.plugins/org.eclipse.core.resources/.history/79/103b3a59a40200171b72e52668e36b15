package fractionToRecurringDecimal;

import java.util.HashMap;
import java.util.Map;

// LeetCode #166

public class FractionToRecurringDecimal {

	public String fractionToDecimal(int numerator, int denominator) {
		if (numerator == 0) {
			return "0";
		}
		StringBuilder sb = new StringBuilder();
		// positive or negative
		sb.append(((numerator > 0) ^ (denominator > 0)) ? "-" : "");
		long a = Math.abs((long) numerator);
		long b = Math.abs((long) denominator);
		// integral part
		sb.append(a / b);
		a %= b;
		if (a == 0) {
			return sb.toString();
		}
		// decimal part
        sb.append(".");
        Map<Long, Integer> map = new HashMap<>();
        map.put(num, res.length());
        while (num != 0) {
            num *= 10;
            res.append(num / den);
            num %= den;
            if (map.containsKey(num)) {
                int index = map.get(num);
                res.insert(index, "(");
                res.append(")");
                break;
            }
            else {
                map.put(num, res.length());
            }
        }
	}

}
